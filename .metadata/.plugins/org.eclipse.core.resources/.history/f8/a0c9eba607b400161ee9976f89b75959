import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import swing2swt.layout.BoxLayout;
import org.eclipse.swt.widgets.Label;

import java.util.ArrayList;

import org.eclipse.swt.SWT;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Text;
import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.databinding.observable.value.IObservableValue;
import org.eclipse.jface.databinding.swt.WidgetProperties;
import org.eclipse.core.databinding.beans.PojoProperties;
import org.eclipse.core.databinding.observable.Realm;
import org.eclipse.jface.databinding.swt.SWTObservables;

public class MainScreen {
	private DataBindingContext m_bindingContext;

	//Variables to show on the screen
	//Used for generating MOs
	public ArrayList<Integer> TextMOs = new ArrayList<Integer>();
	public ArrayList<Integer> GeneratedMOs = new ArrayList<Integer>();  
	public ArrayList<Integer> UsedMOs = new ArrayList<Integer>();
	public String Alice_Identity = "Alice123";
	public ArrayList<Integer> Identity_L_List = new ArrayList<Integer>();
	public int Alice_Bank_Balance = 500;
	public int BlindingFactor = 12345;
	
	//Used for signing MOs
	public String SignedMO;
	public String SignedBlindMO;
	
	//Used to send MO to Bob
	public String BitVector;
	
	//Used to Submit MO
	public boolean IsMOValid;
	public String WhoCheated;
	public int Bob_Bank_Balance = 500;
	
	protected Shell shell;

	/**
	 * Launch the application.
	 * @param args
	 */
	public static void main(String[] args) {
		Display display = Display.getDefault();
		Realm.runWithDefault(SWTObservables.getRealm(display), new Runnable() {
			public void run() {
				try {
					MainScreen window = new MainScreen();
					window.open();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}

	/**
	 * Create contents of the window.
	 */
	protected void createContents() {
		shell = new Shell();
		shell.setSize(552, 547);
		shell.setText("Digital Cash Application");
		
		Label lblDigitalCash = new Label(shell, SWT.NONE);
		lblDigitalCash.setFont(SWTResourceManager.getFont("Segoe UI", 12, SWT.BOLD));
		lblDigitalCash.setBounds(171, 10, 182, 21);
		lblDigitalCash.setText("Digital Cash - COSC 645 Final");
		
		Button btnAliceSendsMos = new Button(shell, SWT.NONE);
		btnAliceSendsMos.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				
				//Generate 100 MOs, store into a local variable and show on UI
				GenerateMOs.Generate();
				MO_Display window = new MO_Display();
				window.open();
			}
		});
		btnAliceSendsMos.setBounds(171, 175, 203, 34);
		btnAliceSendsMos.setText("Alice Sends MOs to Bank");
		
		Button btnBankSignsMo = new Button(shell, SWT.NONE);
		btnBankSignsMo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				//Should use Alice's Ls and Rs for 99 MOs and validate them
				//Should sign the final MO
				//Show validated MOs and the signed MO on UI
				SignMO.Sign();
			}
		});
		btnBankSignsMo.setBounds(171, 258, 203, 34);
		btnBankSignsMo.setText("Bank Signs MO and returns to Alice");
		
		Button btnAliceSendsMo = new Button(shell, SWT.NONE);
		btnAliceSendsMo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				//Should ask Bob for bit vector
				//Send the corresponding Ls and Rs along with MO
				//Show what Bob receives on UI
				SendMO.Send();
			}
		});
		btnAliceSendsMo.setBounds(171, 348, 203, 34);
		btnAliceSendsMo.setText("Alice Sends MO to Bob");
		
		Button btnBobSendsMo = new Button(shell, SWT.NONE);
		btnBobSendsMo.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				//Send MO received from Alice to Bank
				//Decrypt MO
				//Validate that the same MO was not used before
				//Validate that the same serial number was not used before
				//If same serial number was used before, try to find Alice using Ls and Rs
				//Show output on UI
				SubmitMO.Submit();
			}
		});
		btnBobSendsMo.setBounds(171, 443, 203, 34);
		btnBobSendsMo.setText("Bob Sends MO to Bank");
		
		Label lblNewLabel = new Label(shell, SWT.NONE);
		lblNewLabel.setBounds(27, 45, 96, 15);
		lblNewLabel.setText("Alice's Identity");
		m_bindingContext = initDataBindings();
		
	}
	protected DataBindingContext initDataBindings() {
		DataBindingContext bindingContext = new DataBindingContext();
		//
		return bindingContext;
	}
}
