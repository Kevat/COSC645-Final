import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.ArrayList;

public class UserAlice {
	
	private static Integer Min = 1;
	private static Integer Max = 100000;
	
	public static void GenerateMOs(String aliceIdentity, String blindFactor,
			ArrayList<BigInteger> TextMOs, ArrayList<BigInteger> GeneratedMOs,
			ArrayList<BigInteger> Identity_L_List, Bank m_bank) {

		for (int i = 0; i < 100; i++)
		{
			MoneyOrder newMO = GenerateTextMO();
			BigInteger newMOInt = new BigInteger(newMO.getData());
			TextMOs.add(newMOInt);
			
			//Get blinding factor
			BigInteger blindingFactor = BigInteger.ZERO;
			//Get blinding factor, which has to be a non-zero residue of mod n (from bank's public key)
			BigInteger residue = BigInteger.ZERO;
			while (residue.compareTo(BigInteger.ZERO) == 0)
			{
				//Get random double multiply by max, convert to big integer
				//This will get a value between Min and Max + Min as a big integer
				blindingFactor = BigInteger.valueOf(Min + (long)(Max * Math.random()));
				//Residue is used to verify that the blinding factor is a non-zero residue
				residue = blindingFactor.mod(m_bank.getPublic().getModulus());
			}
			
			//Store blinding factor in its own array! - TODO
			
			//Encrypt the blinding factor using the Bank's public key
			BigInteger generatedMO = new BigInteger(newMO.data);
			generatedMO = generatedMO.multiply(blindingFactor.modPow(m_bank.getPublic().getExponent(), m_bank.getPublic().getModulus()));
			GeneratedMOs.add(generatedMO);
			
			//Add identity strings??
			//identity_L_List.add(i);
		}
	}
	
	private static MoneyOrder GenerateTextMO()
	{
		//Serial number
		ByteBuffer b = ByteBuffer.allocate(10);
		//Get a double and multiply by Max to get a number between 0 and Max
		//TODO - Should we track the serial numbers which are already used and not use them?
		//Should we just start at 1 and then increment for the sake of keeping this project simple?
		b.putInt((int)(Max * Math.random()));
		byte[] newSN = b.array();
		
		//Amount
		ByteBuffer b1 = ByteBuffer.allocate(10);
		b1.putInt(100);
		byte[] newAmount = b1.array();
		
		MoneyOrder newMO = new MoneyOrder(newSN, newAmount);
		return newMO;
	}
}
